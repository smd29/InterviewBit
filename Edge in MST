"""
Problem Description

Given a undirected weighted graph with A nodes labelled from 1 to A with M edges given in a form of 2D-matrix B of size M * 3 where B[i][0] and B[i][1] denotes the two nodes connected by an edge of weight B[i][2].

For each edge check whether it belongs to any of the possible minimum spanning tree or not , return 1 if it belongs else return 0.

Return an one-dimensional binary array of size M denoting answer for each edge.

NOTE:

The graph may be disconnected in that case consider mst for each component.
No self-loops and no multiple edges present.
Answers in output array must be in order with the input array B output[i] must denote the answer of edge B[i][0] to B[i][1].


Problem Constraints

1 <= A, M <= 3*105

1 <= B[i][0], B[i][1] <= A

1 <= B[i][1] <= 103



Input Format

The first argument given is an integer A representing the number of nodes in the graph.

The second argument given is an matrix B of size M x 3 which represents the M edges such that there is a edge between node B[i][0] and node B[i][1] with weight B[i][2].



Output Format

Return an one-dimensional binary array of size M denoting answer for each edge.



Example Input

Input 1:

 A = 3
 B = [ [1, 2, 2]
       [1, 3, 2]
       [2, 3, 3]
     ]


Example Output

Output 1:

 [1, 1, 0]


Example Explanation

Explanation 1:

 Edge (1, 2) with weight 2 is included in the MST           1
                                                          /   \
                                                         2     3
 Edge (1, 3) with weight 2 is included in the same MST mentioned above.
 Edge (2,3) with weight 3 cannot be included in any of the mst possible.
 So we will return [1, 1, 0]
"""
maxn = 300009
arr = []
rank = []

def initialize():
    global maxn,arr,rank 
    arr = []
    rank = [1] * maxn 
    for i in range(maxn):
        arr.append(i)

def parent(a):
    global arr 
    while a != arr[a]:
        arr[a] = arr[arr[a]]
        a = arr[a]
    return a

def union(a,b):
    global arr,rank
    root_a = parent(a)
    root_b = parent(b)
    if rank[root_a] <= rank[root_b]:
        arr[root_a] = root_b
        rank[root_b] += rank[root_a]
    else:
        arr[root_b] = root_a
        rank[root_a] += rank[root_b]

class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, A, B):
        initialize()
        edges = []
        edge_count,edge_num = 0, 0 
        for edge in B:
            src,dest,wt = edge[0],edge[1],edge[2]
            edges.append((wt,edge_num,src,dest))
            edge_num += 1
        edges.sort(key=lambda x:x[0])
        size = len(B)
        res = [0] * size 
        while edge_count < size:
            i = edge_count
            while i < size and edges[i][0] == edges[edge_count][0]:
                if parent(edges[i][2]) != parent(edges[i][3]):
                    res[edges[i][1]] = 1
                i += 1
            i = edge_count
            while i < size and edges[i][0] == edges[edge_count][0]:
                if parent(edges[i][2]) != parent(edges[i][3]):
                    union(edges[i][2],edges[i][3])
                i += 1
            edge_count = i 
        return res
