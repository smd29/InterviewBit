"""
Alex and Sam are very good friends. Alex is doing programming a lot these days. He has set a target A for himself. Initially, Alex score is zero. 
Alex can only double his score by doing a question or Alex can seek help from Sam for doing questions which will contribute 1 to Alex score. Alex wants his score to be exactly A. 
Also, he does not want to take much help from Sam.

Find and return the minimum number of times Alex needs to take help from Sam to achieve a score of exactly A.

Input 1:
    A = 5
Output 1:
    2
    Initial score : 0
    Takes help from Sam, score : 1
    Alex solves a question, score : 2
    Alex solves a question, score : 4
    Takes help from Sam, score: 5

Input 2:
    A = 3
Output 2:
    2
    Initial score : 0
    Takes help from Sam, score : 1
    Alex solves a question, score : 2
    Takes help from Sam, score : 3
"""

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        # ans should be no of 1's in the binary representation 
        count = 0 
        while A > 0:
            A = A & (A-1)
            count += 1
        return count
