"""
Problem Description

Given an integer A.
Two numbers X and Y are defined as follows:

X is the greatest number smaller than A such that XOR sum of X and A is the same as the sum of X and A.
Y is the smallest number greater than A such that XOR sum of Y and A is the same as the sum of Y and A.
Find and return the XOR of X and Y.

NOTE 1: XOR of X and Y is defined as X ^ Y where '^' is the BITWISE XOR operator.

NOTE 2: Your code will be run against a maximum of 100000 Test Cases.



Problem Constraints

1 <= A <= 109



Input Format

First and only argument is an integer A.



Output Format

Return an integer denoting the XOR of X and Y.



Example Input

A = 5


Example Output

10


Example Explanation

The value of X will be 2 and the value of Y will be 8. The XOR of 2 and 8 is 10.
"""
class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        def find_MSB(n):
            MSB = 0 
            n = n // 2
            while n > 0:
                n = n // 2
                MSB += 1
            return MSB 

        def find_X(n):
            MSB = find_MSB(n)
            for bit in range(MSB+1):
                n = (n ^ (1 << bit))
            return n

        def find_Y(n):
            MSB = find_MSB(n)
            Y = (1 << (MSB+1))
            return Y 

        return find_X(A) ^ find_Y(A)
