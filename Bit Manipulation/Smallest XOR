"""
Problem Description

Given two integers A and B, find a number X such that A xor X is minimum possible, and the number of set bits in X equals B.



Problem Constraints

0 <= A <= 109
0 <= B <= 30



Input Format

First argument contains a single integer A. Second argument contains a single integer B.



Output Format

Return a single integer X.



Example Input

Input 1:

 A = 3
 B = 3
Input 2:

 A = 15
 B = 2


Example Output

Output 1:

 7
Output 2:

 12


Example Explanation

Explanation 1:

 3 xor 7 = 4 which is minimum
Explanation 2:

 15 xor 12 = 3 which is minimum
 """
 class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        #three cases:1.same no of set bits in A 2. less 3. more
        set_bits = 0
        for bit in range(32):
            if A & (1 << bit):
                set_bits += 1
        if set_bits == B:
            return A

        if set_bits < B:
            X = A
            diff = B - set_bits
            for bit in range(32):
                if diff == 0:
                    return X
                if not (A & (1 << bit)):
                    X = (X ^ (1 << bit))
                    diff -= 1

        else:
            curr_set_bits = 0
            X = 0
            for bit in range(31, -1, -1):
                if B == curr_set_bits:
                    return X
                if A & (1 << bit):
                    X = (X ^ (1 << bit))
                    curr_set_bits += 1
