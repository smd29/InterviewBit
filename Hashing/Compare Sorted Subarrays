"""
Problem Description
Given an array A of length N. You have to answer Q queries.

Each query will contain four integers l1, r1, l2, and r2. If sorted segment from [l1, r1] is the same as the sorted segment from [l2 r2], then the answer is 1 else 0.

NOTE The queries are 0-indexed.



Problem Constraints
0 <= A[i] <= 100000
1 <= N <= 100000
1 <= Q <= 100000



Input Format
The first argument is an array A.
The second is a 2D array B denoting queries with dimension Q * 4.
Consider ith query as l1 = B[i][0], r1 = B[i][1], l2 = A[i][2], r2 = B[i][3].



Output Format
Return an array of length Q with answers to the queries in the same order as the input.



Example Input
Input 1:

 A = [1, 7, 11, 8, 11, 7, 1]
 B = [ 
       [0, 2, 4, 6]
     ]
Input 2:

 A = [1, 3, 2]
 B = [
       [0, 1, 1, 2]
     ] 


Example Output
Output 1:

 [1]
Output 2:

 [0]


Example Explanation
Explanation 1:

 (0, 2) -> [1, 7, 11]
 (4, 6) -> [11, 7, 1]
 Both are same when sorted hence 1.
Explanation 2:

 (0, 1) -> [1, 3]
 (1, 2) -> [3, 2] 
 Both are different when sorted hence 0.
"""
import random
N = 100000
inf = 1 << 46
hash_dict = {}
def rand46():
    hash_val = 0 
    hash_val |= random.randint(0,inf)
    x = random.randint(0,inf)
    hash_val |= (x << 15)
    return hash_val

def set_hash(a):
    hash_dict.clear()
    n = len(a)
    for i in range(n):
        if hash_dict.get(a[i]) == None:
            hash_dict[a[i]] = rand46()

class Solution:
	# @param A : list of integers
	# @param B : list of list of integers
	# @return a list of integers
	def solve(self, A, B):
        n = len(A)
        set_hash(A)
        pf_sum = [0] * n 
        pf_sum[0] = hash_dict[A[0]]
        for idx in range(1,n):
            pf_sum[idx] = pf_sum[idx-1] + hash_dict[A[idx]]

        q = len(B)
        ans = [0] * q
        v1, v2 = 0, 0
        for i in range(q):
            if B[i][0] > 0:
                v1 = pf_sum[B[i][1]] - (pf_sum[B[i][0]- 1])
            else:
                v1 = pf_sum[B[i][1]]
            if B[i][2] > 0:
                v2 = pf_sum[B[i][3]] - (pf_sum[B[i][2]-1])
            else:
                v2 = pf_sum[B[i][3]]
            if v1 == v2:
                ans[i] = 1
        return ans
