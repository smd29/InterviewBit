"""
Problem Description
Merge two sorted linked lists, A and B, and return it as a new list.

The new list should be made by splicing together the nodes of the first two lists and should also be sorted.



Problem Constraints
0 <= |A|, |B| <= 105



Input Format
The first argument of input contains a pointer to the head of linked list A.

The second argument of input contains a pointer to the head of linked list B.



Output Format
Return a pointer to the head of the merged linked list.



Example Input
Input 1:

 A = 5 -> 8 -> 20
 B = 4 -> 11 -> 15
Input 2:

 A = 1 -> 2 -> 3
 B = Null


Example Output
Output 1:

 4 -> 5 -> 8 -> 11 -> 15 -> 20
Output 2:

 1 -> 2 -> 3


Example Explanation
Explanation 1:

 Merging A and B will result in 4 -> 5 -> 8 -> 11 -> 15 -> 20 
Explanation 2:

 We don't need to merge as B is empty. 
"""
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @param B : head node of linked list
	# @return the head node in the linked list
	def mergeTwoLists(self, head1, head2):
		if not head1 and not head2:
			return head1 
		if not head1:
			return head2
		if not head2:
			return head1 
		if head1.val <= head2.val:
			head = head1
			head1 = head1.next
		else:
			head = head2
			head2 = head2.next
		curr = head 
		while head1 and head2:
			if head1.val <= head2.val:
				curr.next = head1
				head1 = head1.next 
			else:
				curr.next = head2
				head2 = head2.next 
			curr = curr.next 
		if head1:
			curr.next = head1 
		if head2:
			curr.next = head2 
		return head
