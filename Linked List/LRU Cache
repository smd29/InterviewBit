"""
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item.
The LRUCache will be initialized with an integer corresponding to its capacity. Capacity indicates the maximum number of unique keys it can hold at a time.

Definition of "least recently used" : An access to an item is defined as a get or a set operation of the item. "Least recently used" item is the one with the oldest access time.

NOTE: If you are using any global variables, make sure to clear them in the constructor.

Example :

Input : 
         capacity = 2
         set(1, 10)
         set(5, 12)
         get(5)        returns 12
         get(1)        returns 10
         get(10)       returns -1
         set(6, 14)    this pushes out key = 5 as LRU is full. 
         get(5)        returns -1 
"""
class Node:
    def __init__(self,key,val):
        self.key, self.val = key,val
        self.prev = self.next = None
        
class LRUCache:
    
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        
        #LRU: Head.next || MRU: Tail.prev (Most recently Used)
        self.head, self.tail = Node(0,0), Node(0,0)
        self.head.next, self.tail.prev = self.tail, self.head 

    def get(self, key: int) -> int:
        if key in self.cache:
            #update this as the MRU 
            self.remove(self.cache[key])
            self.insert(self.cache[key])
            return self.cache[key].val
            
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key,value)
        #Update this as MRU 
        self.insert(self.cache[key])
        
        if len(self.cache) > self.capacity:
            #delete the LRU 
            lru = self.head.next 
            #delete from he linked list and from cache
            self.remove(lru)
            del self.cache[lru.key]
    
    #remove node from linked list
    def remove(self,node):
        prev, nxt = node.prev, node.next 
        prev.next = nxt
        nxt.prev = prev
        
    #insert node at tail
    def insert(self,node):
        prev, nxt = self.tail.prev, self.tail 
        prev.next = node
        nxt.prev = node
        node.next, node.prev = nxt, prev
        
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
