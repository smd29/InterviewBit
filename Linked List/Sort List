"""
Problem Description
Sort a linked list, A in O(n log n) time using constant space complexity.



Problem Constraints
0 <= |A| = 105



Input Format
The first and the only arugment of input contains a pointer to the head of the linked list, A.



Output Format
Return a pointer to the head of the sorted linked list.



Example Input
Input 1:

A = [3, 4, 2, 8]
Input 2:

A = [1]


Example Output
Output 1:

[2, 3, 4, 8]
Output 2:

[1]


Example Explanation
Explanation 1:

 The sorted form of [3, 4, 2, 8] is [2, 3, 4, 8].
Explanation 2:

 The sorted form of [1] is [1].
"""
# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @return the head node in the linked list
	def sortList(self, head):
        if not head or not head.next:
            return head 
        mid_elem = self.getMiddle(head)
        next_mid = mid_elem.next
        mid_elem.next = None

        left = self.sortList(head)
        right = self.sortList(next_mid)

        sorted_list = self.merge(left,right)
        return sorted_list


    def getMiddle(self,head):
        slow, fast = head, head
        if not head.next:
            return head 
        while fast.next and fast.next.next:
            slow = slow.next 
            fast = fast.next .next 
        return slow

    def merge(self,head1,head2):
        if not head1 and not head2:
            return head1
        if not head1:
            return head2
        if not head2:
            return head1
        if head1.val <= head2.val:
            head = head1
            head1 = head1.next 
        else:
            head = head2
            head2 = head2.next 
        curr = head
        while head1 and head2:
            if head1.val <= head2.val:
                curr.next = head1
                head1 = head1.next 
            else:
                curr.next = head2
                head2 = head2.next
            curr = curr.next 
        if head1:
            curr.next = head1
        if head2:
            curr.next = head2
        return head
