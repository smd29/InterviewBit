"""
Problem Description
Given an expression string A, examine whether the pairs and the orders of “{“,”}”, ”(“,”)”, ”[“,”]” are correct in A.

Refer to the examples for more clarity.



Problem Constraints
1 <= |A| <= 100



Input Format
The first and the only argument of input contains the string A having the parenthesis sequence.



Output Format
Return 0 if the parenthesis sequence is not balanced.

Return 1 if the parenthesis sequence is balanced.



Example Input
Input 1:

 A = {([])}
Input 2:

 A = (){
Input 3:

 A = ()[] 


Example Output
Output 1:

 1 
Output 2:

 0 
Output 3:

 1 


Example Explanation
You can clearly see that the first and third case contain valid paranthesis.

In the second case, there is no closing bracket for {, thus the paranthesis sequence is invalid.


"""

class Solution:
	# @param A : string
	# @return an integer
	def solve(self, A):
		stack = []
		for c in A:
			if c in ["(","{","["]:
				stack.append(c)
			else:
				if not stack:
					return 0
				if c == ")":
					if stack[-1] == "(":
						stack.pop()
				elif c == "}":
					if stack[-1] == "{":
						stack.pop()
				elif c == "]":
					if stack[-1] == "[":
						stack.pop()
		if len(stack) == 0:
			return 1
		return 0
