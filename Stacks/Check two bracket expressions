"""
Problem Description
Given two strings A and B. Each string represents an expression consisting of lowercase English alphabets, '+', '-', '(' and ')'.

The task is to compare them and check if they are similar. If they are identical, return 1 else, return 0.

NOTE: It may be assumed that there are at most 26 operands from ‘a’ to ‘z’, and every operand appears only once.



Problem Constraints
1 <= length of the each String <= 100



Input Format
The given arguments are string A and string B.



Output Format
Return 1 if they represent the same expression else return 0.



Example Input
Input 1:

 A = "-(a+b+c)"
 B = "-a-b-c"
Input 2:

 A = "a-b-(c-d)"
 B = "a-b-c-d"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 The expression "-(a+b+c)" can be written as "-a-b-c" which is equal as B. 
Explanation 2:

 Both the expression are different.
"""
MAX_CHAR = 26
def adjSign(s, i):
    if (i == 0):
        return 1
    if (s[i - 1] == '-'):
        return 0
    return 1

def evaluate(s, v, add):
    stk = []
    stk.append(1)
    n = len(s)
    i = 0
    while (i < n):
        if (s[i] == '+' or s[i] == '-'):
            i+=1
            continue
        
        if (s[i] == '('):
            if (adjSign(s, i)):
                stk.append(stk[-1])
            else:
                stk.append(1-stk[-1])
        
        elif (s[i] == ')'):
            stk.pop()

        else:
            if(stk[-1]):
                if(adjSign(s,i)):
                    if(add == 1):
                        v[ord(s[i]) - 97] += 1
                    else:
                        v[ord(s[i]) - 97] -= 1
                else:
                    if(add == 1):
                        v[ord(s[i]) - 97] -= 1
                    else:
                        v[ord(s[i]) - 97] += 1
                #v[ord(s[i]) - 97] += (adjSign(s, i) ? add ? 1 : -1 : add ? -1 : 1);
            else:
                if(adjSign(s,i)):
                    if(add == 1):
                        v[ord(s[i]) - 97] -= 1
                    else:
                        v[ord(s[i]) - 97] += 1
                else:
                    if(add == 1):
                        v[ord(s[i]) - 97] += 1
                    else:
                        v[ord(s[i]) - 97] -= 1
        
        i+=1

def areSame(expr1, expr2):
    v = [0] * MAX_CHAR
    evaluate(expr1, v, 1)
    evaluate(expr2, v, 0)
    for i in range(MAX_CHAR):
        if (v[i] != 0):
            return 0
    return 1

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        if(areSame(A,B)):
            return 1
        return 0
