"""
Given a 2D binary matrix of integers A containing 0's and 1's of size N x M.

Find the largest rectangle containing only 1's and return its area.

Note: Rows are numbered from top to bottom and columns are numbered from left to right.


Input Format

The only argument given is the integer matrix A.
Output Format

Return the area of the largest rectangle containing only 1's.
Constraints

1 <= N, M <= 1000
0 <= A[i] <= 1
For Example

Input 1:
    A = [   [0, 0, 1]
            [0, 1, 1]
            [1, 1, 1]   ]
Output 1:
    4

Input 2:
    A = [   [0, 1, 0, 1]
            [1, 0, 1, 0]    ]
Output 2:
    1
"""
class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, matrix):
        rows, cols = len(matrix), len(matrix[0])
        histogram = [[0 for val in range(cols)]for val in range(rows)]
        max_area = 0
        for r in range(rows):
            for c in range(cols):
                if r == 0:
                    histogram[r][c] = matrix[r][c]
                else:
                    if matrix[r][c] == 0:
                        histogram[r][c] = 0
                    else:
                        histogram[r][c] = histogram[r-1][c] + 1
                        
            #for each histogram, find maximum length histogram
            heights = histogram[r]
            area = self.largestRectangle(heights)
            max_area = max(max_area,area)
        return max_area
        
        
        
    def largestRectangle(self,heights):
        #left smaller element 
        #right smaller element
        left_smaller = [None] * len(heights)
        right_smaller = [None] * len(heights)
        stack = []
        #fill left_smaller array 
        for idx,val in enumerate(heights):
            while stack and heights[stack[-1]] >= val:
                    stack.pop()
            if not stack:
                #no element is less than current in left side
                left_smaller[idx] = 0
            else:
                #stack[-1] is the smallest element, thats why we are adding 1
                left_smaller[idx] = stack[-1]+1
                
            stack.append(idx)
        
        stack = []
        #fill right_smaller array 
        for idx in range(len(heights)-1,-1,-1):
            val = heights[idx]
            while stack and heights[stack[-1]] >= val:
                stack.pop()
            if not stack:
                right_smaller[idx] = len(heights) - 1
            else:
                #stack[-1] is the smallest element and as we are traversing right to left, that's why subtracting 1
                right_smaller[idx] = stack[-1] - 1
            
            stack.append(idx)
                
        
        max_area = 0
        #for each bar we have what is the smallest in left and right
        for idx,height in enumerate(heights):
            bars = right_smaller[idx] - left_smaller[idx] + 1
            area = bars * height
            max_area = max(max_area, area)
        return max_area
