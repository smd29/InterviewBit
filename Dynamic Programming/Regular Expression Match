"""
Problem Description
Implement wildcard pattern matching with support for ' ? ' and ' * ' for strings A and B.

' ? ' : Matches any single character.
' * ' : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).



Problem Constraints
1 <= length(A), length(B) <= 104



Input Format
The first argument of input contains a string A.
The second argument of input contains a string B.



Output Format
Return 1 if the patterns match else return 0.



Example Input
Input 1:

 A = "aaa"
 B = "a*"
Input 2:

 A = "acz"
 B = "a?a"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 Since '*' matches any sequence of characters. Last two 'a' in string A will be match by '*'.
 So, the pattern matches we return 1.
Explanation 2:

 '?' matches any single character. First two character in string A will be match. 
 But the last character i.e 'z' != 'a'. Return 0.
"""
class Solution:
	# @param A : string
	# @param B : string
	# @return an integer
	def isMatch(self, A, B):
        rows, cols = len(A) + 1, len(B) + 1
        dp = [[False for c in range(cols)]for r in range(rows)]
        dp[0][0] = True

        #first row, when text is empty 
        for c in range(1,cols):
            if B[c-1] == "*":
                dp[0][c] = dp[0][c-1]
        
        for r in range(1,rows):
            for c in range(1,cols):
                if B[c-1] == "*":
                    dp[r][c] = dp[r-1][c] or dp[r][c-1]
                elif B[c-1] == "?" or A[r-1] == B[c-1]:
                    dp[r][c] = dp[r-1][c-1]
        return 0 if dp[-1][-1] == False else 1
