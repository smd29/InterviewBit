"""
Problem Description
Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.

Also given an integer C which represents knapsack capacity.

Find out the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.

NOTE:

You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).


Problem Constraints
1 <= N <= 103

1 <= C <= 103

1 <= A[i], B[i] <= 103



Input Format
First argument is an integer array A of size N denoting the values on N items.

Second argument is an integer array B of size N denoting the weights on N items.

Third argument is an integer C denoting the knapsack capacity.



Output Format
Return a single integer denoting the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.



Example Input
Input 1:

 A = [60, 100, 120]
 B = [10, 20, 30]
 C = 50
Input 2:

 A = [10, 20, 30, 40]
 B = [12, 13, 15, 19]
 C = 10


Example Output
Output 1:

 220
Output 2:

 0


Example Explanation
Explanation 1:

 Taking items with weight 20 and 30 will give us the maximum value i.e 100 + 120 = 220
Explanation 2:

 Knapsack capacity is 10 but each item has weight greater than 10 so no items can be considered in the knapsack therefore answer is 0.
"""
class Solution:
    # @param val : list of integers
    # @param wt : list of integers
    # @param capacity : integer
    # @return an integer
    def solve(self, val, wt, capacity):
        n = len(val)
        #create a matrix of (n+1)*(c+1)
        dp = [[0 for c in range(capacity+1)]for r in range(n+1)]
        #dp[i][j] => maximum profit for 0-ith values/weights and 0-jth capacity
        for r in range(n+1):
            for c in range(capacity+1):
                if r == 0 or c == 0:
                    dp[r][c] = 0
                elif wt[r-1] <= c:
                    #two options: pick or non-pick
                    pick = val[r-1] + dp[r-1][c-wt[r-1]]
                    non_pick = dp[r-1][c]
                    dp[r][c] = max(pick,non_pick)
                else:
                    dp[r][c] = dp[r-1][c] #non_pick
        return dp[-1][-1]
