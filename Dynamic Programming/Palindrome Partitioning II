"""
Problem Description
Given a string A, partition A such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of A.



Problem Constraints
1 <= length(A) <= 501



Input Format
The first and the only argument contains the string A.



Output Format
Return an integer, representing the minimum cuts needed.



Example Input
Input 1:

 A = "aba"
Input 2:

 A = "aab"


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 "aba" is already a palindrome, so no cuts are needed.
Explanation 2:

 Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
"""
class Solution:
	# @param A : string
	# @return an integer
	def minCut(self, A):
		n = len(A)
        dp = [[False for c in range(n)] for r in range(n)]
        d = [0 for x in range(n)]
        for i in range(n - 1, -1, -1):
            d[i] = n - i - 1
            for j in range(i, n):
                if A[i] == A[j] and (j - i < 2 or dp[i + 1][j - 1]):
                    dp[i][j] = True
                    if j == n - 1:
                        d[i] = 0
                    elif d[j + 1] + 1 < d[i]:
                        d[i] = d[j + 1] + 1
        return d[0]
