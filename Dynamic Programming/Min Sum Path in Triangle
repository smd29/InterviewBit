"""
Problem Description
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

Adjacent numbers for jth number of row i is jth and (j+1)th numbers of row i+1 is



Problem Constraints
|A| <= 1000

A[i] <= 1000



Input Format
First and only argument is the vector of vector A defining the given triangle



Output Format
Return the minimum sum



Example Input
Input 1:

 
A = [ 
         [2],
        [3, 4],
       [6, 5, 7],
      [4, 1, 8, 3]
    ]
Input 2:

 A = [ [1] ]


Example Output
Output 1:

 11
Output 2:

 1


Example Explanation
Explanation 1:

 The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Explanation 2:

 Only 2 can be collected.
"""

class Solution:
    # @param A : list of list of integers
    # @return an integer
    def minimumTotal(self, A):
        rows = len(A)
        dp = []
        for i in range(1,rows+1):
            dp.append([0] * i)
        dp[0][0] = A[0][0]
        for r in range(1,rows):
            for c in range(r+1):
                if c == 0:
                    dp[r][c] = dp[r-1][c] + A[r][c]
                elif r == c:
                    dp[r][c] = dp[r-1][c-1] + A[r][c]
                else:
                    dp[r][c] = min(dp[r-1][c-1],dp[r-1][c]) + A[r][c]
        return min(dp[-1])
