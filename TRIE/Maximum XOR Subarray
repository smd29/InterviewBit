"""
Problem Description
Given an array, A of integers of size N. Find the subarray AL, AL+1, AL+2, ... AR with 1<=L<=R<=N, which has maximum XOR value.

NOTE: If there are multiple subarrays with the same maximum value, return the subarray with minimum length. If the length is the same, return the subarray with the minimum starting index.



Problem Constraints
1 <= N <= 100000
0 <= A[i] <= 109



Input Format
First and only argument is an integer array A.



Output Format
Return an integer array B of size 2. B[0] is the starting index(1-based) of the subarray and B[1] is the ending index(1-based) of the subarray.



Example Input
Input 1:

 A = [1, 4, 3]
Input 2:

 A = [8]


Example Output
Output 1:

 [2, 3]
Output 2:

 [1, 1]


Example Explanation
Explanation 1:

 There are 6 possible subarrays of A:
 subarray            XOR value
 [1]                     1
 [4]                     4
 [3]                     3
 [1, 4]                  5 (1^4)
 [4, 3]                  7 (4^3)
 [1, 4, 3]               6 (1^4^3)

 [4, 3] subarray has maximum XOR value. So, return [2, 3].
Explanation 2:

 There is only one element in the array. So, the maximum XOR value is equal to 8 and the only possible subarray is [1, 1]. 
"""
class  TrieNode:
    def __init__(self):
        self.children = {}
        self.leaf   = 0

class Trie:
    def __init__(self):
        self.root = self.get_node()

    def get_node(self):
        return TrieNode()

    def insert(self, x):
        root = self.root
        for i in range(31, -1, -1):
            index = self.check(x, i)
            if index not in root.children:
                root.children[index] = self.get_node()
            root = root.children.get(index)
        root.leaf = True

    def check(self, x, i):
        if( (x&(1<<i)) != 0 ):
            return True
        else:
            return False

    def findXor(self, x):
        root = self.root
        ans = 0
        for i in range(31, -1, -1):
            f = self.check(x, i)
            index = f^1
            if index not in root.children:
                root = root.children.get(index^1)
            else:
                ans = ans + (1 << i)
                root = root.children.get(index)
        
        return ans

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        n = len(A)
        for i in range(1, n):
            A[i] = A[i]^A[i-1]
        ans = [1, 1]
        maxx = A[0]
        t = Trie()
        t.insert(A[0])
        mp = {}             # to store the indices of the XOR value
        mp[A[0]] = 0
        for i in range(1, n):
            mp[A[i]] = i
            # Case 1 check for subarray(0, i)
            if(A[i] > maxx):
                maxx = A[i]
                ans[0] = 1
                ans[1] = i+1
            elif(A[i] == maxx):
                if(ans[0] != ans[1]):
                    ans[0] = i+1;
                    ans[1] = i+1;
            curMaxx = t.findXor(A[i])
            res = curMaxx ^ A[i]
            j = mp[res]
            j += 1
            if(curMaxx > maxx):
                maxx = curMaxx
                ans[0] = j+1
                ans[1] = i+1
            elif(curMaxx == maxx):        #  check for minimum length if current maximum  = maxx.           
                    curL = i-j+1
                    ansL = ans[1] - ans[0] + 1
                    if(curL < ansL):
                        ans[0] = j+1
                        ans[1] = i+1
            t.insert(A[i])     # insert the xor of the prefix(0, i) into the trie.                  
        return ans
