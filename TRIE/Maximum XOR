"""
Problem Description

Given an array of integers A, find and return the maximum result of A[i] XOR A[j], where i, j are the indexes of the array.



Problem Constraints

1 <= length of the array <= 100000
0 <= A[i] <= 109



Input Format

The only argument given is the integer array A.



Output Format

Return an integer denoting the maximum result of A[i] XOR A[j].



Example Input

Input 1:

 A = [1, 2, 3, 4, 5]
Input 2:

 A = [5, 17, 100, 11]


Example Output

Output 1:

 7
Output 2:

 117


Example Explanation

Explanation 1:

 Maximum XOR occurs between element of indicies(0-based) 1 and 4 i.e. 2 ^ 5 = 7.
Explanation 2:

 Maximum XOR occurs between element of indicies(0-based) 1 and 2 i.e. 17 ^ 100 = 117.
"""
class Solution:
    def solve(self, nums):
        # convert all the numbers to binary array
        bin_arr_tmp = []
        max_len = 0
        for num in nums:
            arr = self.convertToBinaryArray(num)
            bin_arr_tmp.append(arr)
            max_len = max(max_len, len(arr))
        bin_arr = []
        for arr in bin_arr_tmp:
            arr = [0] * (max_len - len(arr)) + arr
            bin_arr.append(arr)

        # and add to trie
        root = TrieNode()
        for arr in bin_arr:
            root.insert(arr)

        max_xor = float('-inf')
        for arr in bin_arr:
            curr = root.child
            xor_arr = []
            for c in arr:
                if c == 1:
                    if 0 in curr:
                        xor_arr.append(0)
                        curr = curr[0]
                    else:
                        xor_arr.append(1)
                        curr = curr[1]
                else:
                    if 1 in curr:
                        xor_arr.append(1)
                        curr = curr[1]
                    else:
                        xor_arr.append(0)
                        curr = curr[0]
            xor_num = self.convertBinToInt(xor_arr)
            num = self.convertBinToInt(arr)
            max_xor = max(max_xor, num ^ xor_num)
        return max_xor

    def convertToBinaryArray(self, num):
        res = []
        while num > 0:
            res.append(num % 2)
            num = num // 2
        res = res[::-1]
        # n = len(res)
        # res = [0] * (32-n) + res
        return res

    def convertBinToInt(self, binary):
        ans = 0
        power = 0
        for idx in range(len(binary) - 1, -1, -1):
            ans += binary[idx] * pow(2, power)
            power += 1
        return ans


class TrieNode:
    def __init__(self):
        self.child = {}

    def insert(self, word):
        curr = self.child
        for c in word:
            if c not in curr:
                curr[c] = {}
            curr = curr[c]
