"""
Problem Description
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer A, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
The final list should be generated in such a way that the indices of the queens in each list should be in reverse lexicographical order.


Problem Constraints
1 <= A <= 10



Input Format
First argument is an integer n denoting the size of chessboard



Output Format
Return an array consisting of all distinct solutions in which each element is a 2d char array representing a unique solution.



Example Input
Input 1:

A = 4
Input 2:

A = 1


Example Output
Output 1:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Output 1:

[
 [Q]
]


Example Explanation
Explanation 1:

There exist only two distinct solutions to the 4-queens puzzle:
Explanation 1:

There exist only one distinct solutions to the 1-queens puzzle:

"""
class Solution:
    # @param A : integer
    # @return a list of list of strings
    def solveNQueens(self, A):
        col, diagonal, anti_diagonal = set(), set(), set()
        row_res = []
        res = []

        def backtrack(row):
            if row == A:
                res.append(row_res.copy())
                return 
            
            for c in range(A):
                if c in col or (row+c) in diagonal or (row-c) in anti_diagonal:
                    continue
                col.add(c)
                diagonal.add(row+c)
                anti_diagonal.add(row-c)
                row_res.append("." * c + "Q" + "." * (A-1-c))
                backtrack(row+1)
                col.remove(c)
                diagonal.remove(row+c)
                anti_diagonal.remove(row-c)
                row_res.pop()
        backtrack(0)
        return res
