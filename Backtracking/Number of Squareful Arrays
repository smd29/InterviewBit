"""
Problem Description

Given an array of integers A, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Find and return the number of permutations of A that are squareful. Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].



Problem Constraints

1 <= length of the array <= 12

1 <= A[i] <= 109



Input Format

The only argument given is the integer array A.



Output Format

Return the number of permutations of A that are squareful.



Example Input

Input 1:

 A = [2, 2, 2]
Input 2:

 A = [1, 17, 8]


Example Output

Output 1:

 1
Output 2:

 2


Example Explanation

Explanation 1:

 Only permutation is [2, 2, 2], the sum of adjacent element is 4 and 4 and both are perfect square.
Explanation 2:

 Permutation are [1, 8, 17] and [17, 8, 1].
"""
import math
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        if len(A) == 1:
            return 0
        res = []
        self.backtrack(A,0,res)
        return len(res)

    def isPerfectSquare(self,a,b):
        val = math.sqrt(a+b)
        return math.floor(val) == math.ceil(val)

    def backtrack(self,A,idx,res):
        if idx == len(A):
            res.append(A.copy())
            return
        
        for i in range(idx,len(A)):
            if i != idx and A[idx] == A[i]:
                #same element
                continue
            #swap
            A[idx],A[i] = A[i],A[idx]
            if A in res:
                A[idx],A[i] = A[i],A[idx]
                continue
            if idx == 0 or (i > 0 and self.isPerfectSquare(A[idx],A[idx-1])):
                self.backtrack(A,idx+1,res)
            A[idx],A[i] = A[i],A[idx]
