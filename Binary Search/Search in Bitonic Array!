"""
Problem Description
Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.


Problem Constraints
3 <= N <= 105

1 <= A[i], B <= 108

Given array always contain a bitonic point.

Array A always contain distinct elements.



Input Format
First argument is an integer array A denoting the bitonic sequence.

Second argument is an integer B.



Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.



Example Input
Input 1:

 A = [3, 9, 10, 20, 17, 5, 1]
 B = 20
Input 2:

 A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
 B = 30


Example Output
Output 1:

 3
Output 2:

 -1


Example Explanation
Explanation 1:

 B = 20 present in A at index 3
Explanation 2:

 B = 30 is not present in A
 """
 
 class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        pivot = self.findPartition(A,0,len(A)-1)
        return self.searchBitonic(A,B,pivot)

    def asc(self,A,B,low,high):
        #ascending part
        while low <= high:
            mid = (low+high) // 2
            if A[mid] == B:
                return mid
            elif A[mid] > B:
                high = mid - 1
            else:
                low = mid + 1
        return -1

    def dsc(self,A,B,low,high):
        #ascending part
        while low <= high:
            mid = (low+high) // 2
            if A[mid] == B:
                return mid
            elif A[mid] < B:
                high = mid - 1
            else:
                low = mid + 1
        return -1

    def findPartition(self,A,low,high):
        partition = 0
        mid = (low+high) // 2
        if A[mid-1] < A[mid] > A[mid+1]:
            return mid
        elif A[mid] > A[mid-1] and A[mid] < A[mid+1]:
            #search right side
            partition = self.findPartition(A,mid,high)
        else:
            #search left side
            partition = self.findPartition(A,low,mid)
        return partition

    def searchBitonic(self,A,B,idx):
        if B > A[idx]:
            return -1
        elif B == A[idx]:
            return idx
        else:

            left = self.asc(A,B,0,idx-1)
            if left != -1:
                return left
            return self.dsc(A,B,idx+1,len(A)-1)
