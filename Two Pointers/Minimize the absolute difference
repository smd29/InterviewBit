"""
Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.
"""
class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @param C : list of integers
	# @return an integer
	def solve(self, A, B, C):
        A_len, B_len, C_len = len(A), len(B), len(C)
        a,b,c = 0,0,0 
        diff = float('inf')
        while a < A_len and b < B_len and c < C_len:
            _max,_min = max(A[a],B[b],C[c]), min(A[a],B[b],C[c])
            diff = min(diff,abs(_max-_min))
            if _min == A[a]:
                a += 1
            elif _min == B[b]:
                b += 1
            else:
                c += 1
        return diff 
