"""
Given an array, arr[] of size N, 
the task is to find the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.

Example Input

Input 1:
A=[2, 1, 6, 4]
Input 2:

A=[1, 1, 1]


Example Output

Output 1:
1
Output 2:

3


Example Explanation

Explanation 1:
Removing arr[1] from the array modifies arr[] to { 2, 6, 4 } such that, arr[0] + arr[2] = arr[1]. 
Therefore, the required output is 1. 
Explanation 2:

 Removing arr[0] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[1] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[2] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Therefore, the required output is 3.

"""

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        count = 0
        pf_even = [0] * len(A)
        pf_even[0] = A[0]
        for i in range(1,len(A)):
            if i % 2 == 0:
                pf_even[i] = pf_even[i-1] + A[i]
            else:
                pf_even[i] = pf_even[i-1]
        
        pf_odd = [0] * len(A)
        for i in range(1,len(A)):
            if i % 2 == 0:
                pf_odd[i] = pf_odd[i-1]
            else:
                pf_odd[i] = pf_odd[i-1] + A[i]
        
        for i in range(len(A)):
            if i == 0:
                evenSum = pf_odd[len(A)-1] - pf_odd[0]
                oddSum = pf_even[len(A)-1] - pf_even[0]
            elif i == len(A) - 1:
                evenSum = pf_even[len(A)-2]
                oddSum = pf_odd[len(A)-2]
            #evenSum[i] = sum_even[0->i]+sum_odd[i+1->n]
            #oddSum[i] = sum_odd[0->i]+sum_even[i+1->n]
            else:
                evenSum = pf_even[i-1] + pf_odd[len(A)-1] - pf_odd[i]
                oddSum = pf_odd[i-1] + pf_even[len(A)-1] - pf_even[i]
            if evenSum == oddSum:
                count += 1
        return count
