"""
**Problem Description**

Given an array of integers A, of size N.

Return the maximum size subarray of A having only non-negative elements. If there are more than one such subarrays, return the one having the earliest starting index in A.

NOTE: It is guaranteed that an answer always exists.



**Problem Constraints**

1 <= N <= 105

-109 <= A[i] <= 109



**Input Format**

The first and only argument given is the integer array A.



**Output Format**

Return maximum size subarray of A having only non-negative elements. If there are more than one such subarrays, return the one having earliest starting index in A.



**Example Input**

Input 1:

 A = [5, 6, -1, 7, 8]
Input 2:

 A = [1, 2, 3, 4, 5, 6]


**Example Output**

Output 1:

 [5, 6]
Output 2:

 [1, 2, 3, 4, 5, 6]


**Example Explanation**

Explanation 1:

 There are two subarrays of size 2 having only non-negative elements.
 1. [5, 6]  starting point  = 0
 2. [7, 8]  starting point  = 3
 As starting point of 1 is smaller, return [5, 6]
Explanation 2:

 There is only one subarray of size 6 having only non-negative elements:
 [1, 2, 3, 4, 5, 6]
"""
class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        max_len = 0
        count = 0
        for i in A:
            if i < 0:
                break
            else:
                count += 1
        if count == len(A):
            return A

        for i in range(len(A)):
            if A[i] > -1:
                for j in range(i,len(A)):
                    if A[j] < 0:
                        start = i
                        end = j
                        curr_len = j - i
                        if curr_len > max_len:
                            max_len = curr_len
                            arr_start = start
                            arr_end = end
                        i = j + 1
                        break
                    elif j == len(A) - 1:
                        start = i
                        end = j + 1
                        curr_len = j+1 - i
                        if curr_len > max_len:
                            max_len = curr_len
                            arr_start = start
                            arr_end = end
        return A[arr_start:arr_end]
