"""
You are given an integer array C of size A. Now you need to find a subarray (contiguous elements) so that the sum of contiguous elements is maximum.
But the sum must not exceed B.

Example Input
Input 1:
A = 5
B = 12
C = [2, 1, 3, 4, 5]
Input 2:

A = 3
B = 1
C = [2, 2, 2]


Example Output
Output 1:
12
Output 2:

0


Example Explanation
Explanation 1:
We can select {3,4,5} which sums up to 12 which is the maximum possible sum.
Explanation 2:

All elements are greater than B, which means we cannot select any subarray.
Hence, the answer is 0.
"""

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : list of integers
    # @return an integer
    def maxSubarray(self, A, B, C):
        sub_sum = []
        for i in range(A):
            sum_val = 0 
            for j in range(i,A):
                sum_val += C[j]
                sub_sum.append(sum_val)
        
        res = 0
        for i in range(len(sub_sum)):
            if sub_sum[i] == B:
                return B
            elif sub_sum[i] < B:
                res = max(res,sub_sum[i])
        return res
