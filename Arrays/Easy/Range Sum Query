"""
You are given an integer array A of length N.
You are also given a 2D integer array B with dimensions M x 2, where each row denotes a [L, R] query.
For each query, you have to find the sum of all elements from L to R indices in A (1 - indexed).
More formally, find A[L] + A[L + 1] + A[L + 2] +... + A[R - 1] + A[R] for each query.
"""

class Solution:
    # @param A : list of integers
    # @param B : list of list of integers
     # @return an list of long
    def rangeSum(self, A, B):
        res = []
        #prefix_sum = [0] * len(A)
        prefix_sum = [0 for i in range(len(A))]
        prefix_sum[0] = A[0]
        for i in range(1,len(A)):
            prefix_sum[i] = prefix_sum[i-1] + A[i]
        
        for i in range(len(B)):
            start = B[i][0] - 1
            end = B[i][1] - 1
            if start == 0:
                val = prefix_sum[end]
            else:
                val = prefix_sum[end] - prefix_sum[start-1]
            res.append(val)
        return res
