"""
You are given an array A of integers of size N.

Your task is to find the equilibrium index of the given array

Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.

NOTE:

Array indexing starts from 0.
If there is no equilibrium index then return -1.
If there are more than one equilibrium indexes then return the minimum index.

Example Input

Input 1:
A=[-7, 1, 5, 2, -4, 3, 0]
Input 2:

A=[1,2,3]


Example Output

Output 1:
3
Output 2:

-1


Example Explanation

Explanation 1:
3 is an equilibrium index, because: 
A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
Explanation 1:

There is no such index.
"""

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        #pf left to right 
        pf_rl = [0] * len(A)
        pf_lr = [0] * len(A)
        pf_lr[0], pf_rl[-1] = A[0], A[-1]
        for idx in range(len(A)-2,-1,-1):
            pf_rl[idx] = pf_rl[idx+1] + A[idx]
        for idx in range(len(A)):
            if idx == 0:
                pf_lr[idx] = A[idx]
            else:    
                pf_lr[idx] = pf_lr[idx-1] + A[idx]
            if pf_lr[idx] == pf_rl[idx]:
                return idx 
        return -1 
