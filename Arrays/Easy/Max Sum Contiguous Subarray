"""
Find the contiguous non empty subarray within an array, A of length N which has the largest sum.

Example Input
Input 1:

 A = [1, 2, 3, 4, -10] 
Input 2:

 A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 


Example Output
Output 1:

 10 
Output 2:

 6 


Example Explanation
Explanation 1:

 The subarray [1, 2, 3, 4] has the maximum possible sum of 10. 
Explanation 2:

 The subarray [4,-1,2,1] has the maximum possible sum of 6. 
 
 """
 
 class Solution:
    # @param A : tuple of integers
    # @return an integer
    def maxSubArray(self, A):
        #kedane's algo
        maxSum = float('-inf')
        currSum = 0
        for val in A:
            currSum += val 
            maxSum = max(maxSum,currSum)
            if currSum < 0:
                currSum = 0 
        return maxSum
