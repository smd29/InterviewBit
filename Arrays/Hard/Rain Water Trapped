"""
Problem Description

Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.



Problem Constraints

1 <= |A| <= 100000



Input Format

First and only argument is the vector A



Output Format

Return one integer, the answer to the question



Example Input

Input 1:

A = [0, 1, 0, 2]
Input 2:

A = [1, 2]


Example Output

Output 1:

1
Output 2:

0


Example Explanation

Explanation 1:

1 unit is trapped on top of the 3rd element.
Explanation 2:

No water is trapped.
"""
class Solution:
	# @param A : tuple of integers
	# @return an integer
	def trap(self, A):
        water = 0 
        left_max,right_max = [0] * len(A), [0] * len(A)
        for idx in range(len(A)):
            if idx == 0:
                left_max[idx] = A[idx]
            else:
                left_max[idx] = max(left_max[idx-1],A[idx])
        
        for idx in range(len(A)-1,-1,-1):
            if idx == len(A) - 1:
                right_max[idx] = A[idx]
            else:
                right_max[idx] = max(right_max[idx+1],A[idx])
        for idx in range(len(A)):
            water += (min(left_max[idx],right_max[idx])-A[idx])
        return water
