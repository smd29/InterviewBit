"""
Problem Description
You are given two strings, A and B, of size N and M, respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.



Problem Constraints
1 <= N < M <= 105



Input Format
Given two arguments, A and B of type String.



Output Format
Return a single integer, i.e., number of permutations of A present in B as a substring.



Example Input
Input 1:

 A = "abc"
 B = "abcbacabc"
Input 2:

 A = "aca"
 B = "acaa"


Example Output
Output 1:

 5
Output 2:

 2


Example Explanation
Explanation 1:

 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:

 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 
"""

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        window_size = len(A)
        A_dict = {}
        for c in A:
            if c in A_dict:
                A_dict[c] += 1
            else:
                A_dict[c] = 1
        count = 0 
        B_dict = {}
        for c in B[:window_size]:
            if c in B_dict:
                B_dict[c] += 1
            else:
                B_dict[c] = 1
        rem_idx,insert_idx = 0 , window_size
        if A_dict == B_dict:
            count = 1
        while insert_idx < len(B):
            add = B[insert_idx]
            rem = B[rem_idx]
            if add in B_dict:
                B_dict[add] += 1
            else:
                B_dict[add] = 1
            if B_dict[rem] == 1:
                del B_dict[rem]
            else:
                B_dict[rem] -= 1
            if A_dict == B_dict:
                count += 1
            insert_idx += 1
            rem_idx += 1
        return count
