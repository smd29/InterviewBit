"""
Problem Description
Given two binary strings A and B, count how many cyclic permutations of B when taken XOR with A give 0.

NOTE: If there is a string, S0, S1, ... Sn-1 , then it is a cyclic permutation is of the form Sk, Sk+1, ... Sn-1, S0, S1, ... Sk-1 where k can be any integer from 0 to N-1.



Problem Constraints
1 ≤ length(A) = length(B) ≤ 105



Input Format
The first argument is a string A.
The second argument is a string B.



Output Format
Return an integer denoting the required answer.



Example Input
Input 1:

 A = "1001"
 B = "0011"
Input 2:

 A = "111"
 B = "111"


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 4 cyclic permutations of B exists: "0011", "0110", "1100", "1001".  
 There is only one cyclic permutation of B i.e. "1001" which has 0 xor with A.
Explanation 2:

 All cyclic permutations of B are same as A and give 0 when taken xor with A. So, the ans is 3.
"""
class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        new_B = B + B[:-1]
        #find the pattern A in new_str using Z_Algo
        new_s = A + "#" + new_B
        z = self.Z_Algo(new_s)
        n = len(new_s)
        count = 0 
        for idx in range(1,n):
            if z[idx] == len(A):
                count += 1
        return count

    def Z_Algo(self,arr):
        n = len(arr)
        z = [0] * n
        z[0] = n 
        l,r, k = 0,0,0 
        for idx in range(1,n):
            if idx > r:
                l,r = idx, idx 
                while r < n and arr[r-l] == arr[r]:
                    r += 1
                z[idx] = r-l 
                r -= 1
            
            else:
                k = idx - l 
                if z[k] < r - idx + 1:
                    z[idx] = z[k]
                else:
                    l = idx 
                    while r < n and arr[r-l] == arr[r]:
                        r += 1
                    z[idx] = r - l 
                    r -= 1
        return z
