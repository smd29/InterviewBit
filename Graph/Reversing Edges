"""
Problem Description

Given a directed graph with A nodes and M edges.
Find the minimum number of edges that needs to be reversed in order to reach node A from node 1.



Problem Constraints

1 <= A, M <= 10 5
1 <= B[i][0], B[i][1] <= A
There can be multiple edges or self loops (B[i][0] = B[i][1])


Input Format

The first argument is an integer A, denoting the number of nodes in the graph.
The second argument is a 2D integer array B, denoting the directed edges in the graph.


Output Format

Return a single integer denoting the minimum number of edges to be reversed.


Example Input

Input 1:
A = 5
B = [[1, 2],
     [2, 3],
     [4, 3],
     [4, 5]]
Input 2:

A = 5
B = [[1, 2],
     [2, 3],
     [3, 4],
     [4, 5]]


Example Output

Output 1:
1
Output 2:

0


Example Explanation

Explanation 1:

Reversing the edge (4, 3) is only required.

Explanation 2:

There already exists a path between 1 and A, so no edges need to be reversed.


"""
from collections import deque,defaultdict
from heapq import heappush,heappop
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return an integer
    def reverseEdges(self, A, B):
        #add negative edge
        adj_list = defaultdict(list)
        all_edges = set()
        for src,dest in B:
            if src != dest:
                all_edges.add(tuple([src,dest]))
        for src,dest in B:
            if src != dest:
                adj_list[src].append([dest,0])
                if tuple([dest,src]) not in all_edges:
                    adj_list[dest].append([src,1])
        #find cost to reach from 1 to A, using Dijkstra
        #SRC is 1
        res = [float('inf')] * (A+1)
        res[1] = 0 
        min_heap = []
        for neighbor,dist in adj_list[1]:
            res[neighbor] = dist
            heappush(min_heap,(dist,neighbor))
        
        while min_heap:
            distance,node = heappop(min_heap)
            for neighbor,current_dist in adj_list[node]:
                dist = distance + current_dist
                if dist < res[neighbor]:
                    res[neighbor] = dist
                    heappush(min_heap,(dist,neighbor))
        
        if res[-1] == float('inf'):
            return -1 
        return res[-1]
