"""
Problem Description

Given a binary search tree.
Return the distance between two nodes with given two keys B and C. It may be assumed that both keys exist in BST.

NOTE: Distance between two nodes is number of edges between them.



Problem Constraints

1 <= Number of nodes in binary tree <= 1000000

0 <= node values <= 109



Input Format

First argument is a root node of the binary tree, A.

Second argument is an integer B.

Third argument is an integer C.



Output Format

Return an integer denoting the distance between two nodes with given two keys B and C



Example Input

Input 1:

    
         5
       /   \
      2     8
     / \   / \
    1   4 6   11
 B = 2
 C = 11
Input 2:

    
         6
       /   \
      2     9
     / \   / \
    1   4 7   10
 B = 2
 C = 6


Example Output

Output 1:

 3
Output 2:

 1


Example Explanation

Explanation 1:

 Path between 2 and 11 is: 2 -> 5 -> 8 -> 11. Distance will be 3.
Explanation 2:

 Path between 2 and 6 is: 2 -> 6. Distance will be 1

"""
# Definition for a  binary tree node
# class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

class Solution:
    # @param A : root node of tree
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, root, B, C):
        #find LCA of B and C, find distances from B and C and sum them

        def findLCA(root,B,C):
            if not root:
                return None 
            if root.val == B or root.val == C:
                return root
            leftLCA = findLCA(root.left,B,C)
            rightLCA = findLCA(root.right,B,C)
            if leftLCA and rightLCA:
                return root
            if leftLCA:
                return leftLCA
            return rightLCA
        
        LCA = findLCA(root,B,C)

        #find distances from LCA 
        def findDistance(root,node):
            dist = 0
            while root.val != node:
                if root.val > node:
                    root = root.left
                else:
                    root = root.right
                dist += 1
            return dist 
        
        return findDistance(LCA,B) + findDistance(LCA,C)
