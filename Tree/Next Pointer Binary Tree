"""
Problem Description
Given a binary tree,

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Assume perfect binary tree and try to solve this in constant extra space.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return the head of the binary tree after the changes are made.



Example Input
Input 1:

 
     1
    /  \
   2    3
Input 2:

 
        1
       /  \
      2    5
     / \  / \
    3  4  6  7


Example Output
Output 1:

 
        1 -> NULL
       /  \
      2 -> 3 -> NULL
Output 2:

 
         1 -> NULL
       /  \
      2 -> 5 -> NULL
     / \  / \
    3->4->6->7 -> NULL


Example Explanation
Explanation 1:

Next pointers are set as given in the output.
Explanation 2:

Next pointers are set as given in the output.
"""
# Definition for a  binary tree node
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

class Solution:
    # @param root, a tree node
    # @return nothing
    def connect(self, root):
        def getNextRight(root):
            if not root:
                return None 
            temp = root.next 
            while temp:
                if temp.left:
                    return temp.left
                if temp.right:
                    return temp.right
                temp = temp.next
            return None 

        firstNode = root
        while firstNode:
            curr = firstNode
            while curr:
                if curr.left:
                    if curr.right:
                        curr.left.next = curr.right
                    else:
                        curr.left.next = getNextRight(curr)

                if curr.right:
                    curr.right.next = getNextRight(curr)
                curr = curr.next 
            
            if firstNode.left:
                firstNode = firstNode.left
            elif firstNode.right:
                firstNode = firstNode.right
            else:
                firstNode = getNextRight(firstNode)
