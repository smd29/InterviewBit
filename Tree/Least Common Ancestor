"""
Problem Description
Find the lowest common ancestor in an unordered binary tree A, given two values, B and C, in the tree.

Lowest common ancestor: the lowest common ancestor (LCA) of two nodes and w in a tree or directed acyclic graph (DAG) is the lowest (i.e., deepest) node that has both v and w as descendants.



Problem Constraints
1 <= size of tree <= 100000

1 <= B, C <= 109



Input Format
First argument is head of tree A.

Second argument is integer B.

Third argument is integer C.



Output Format
Return the LCA.



Example Input
Input 1:

 
      1
     /  \
    2    3
B = 2
C = 3
Input 2:

      1
     /  \
    2    3
   / \
  4   5
B = 4
C = 5


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 LCA is 1.
Explanation 2:

 LCA is 2.

"""
# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @param B : integer
	# @param C : integer
	# @return an integer
	def lca(self, root, B, C):
		if not self.check(root,B) or not self.check(root,C):
			return -1
		return self.findLCA(root,B,C)
		
	
	def check(self,root,B):
		res = []
		def preOrder(node):
			if node:
				res.append(node.val)
				preOrder(node.left)
				preOrder(node.right)
		preOrder(root)
		if B not in res:
			return False
		return True

	def findLCA(self,root,B,C):
		if not root:
			return None
		if root.val == B or root.val == C:
			return root.val 
		leftLCA = self.findLCA(root.left,B,C)
		rightLCA = self.findLCA(root.right,B,C)
		if leftLCA and rightLCA:
			return root.val 
		if leftLCA:
			return leftLCA
		return rightLCA
